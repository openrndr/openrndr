plugins {
    alias(libs.plugins.nebula.release) apply false
    id("org.openrndr.convention.dokka")
}

repositories {
    mavenCentral()
}

def isReleaseVersion = !version.endsWith("SNAPSHOT")

def multiplatformModules = [
        "openrndr-application",
        "openrndr-filter",
        "openrndr-event",
        "openrndr-math",
        "openrndr-color",
        "openrndr-utils",
        "openrndr-shape",
        "openrndr-binpack",
        "openrndr-animatable",
        "openrndr-draw",
        "openrndr-webgl",
        "openrndr-extensions",
        "openrndr-dds",
        "openrndr-openal",
        "openrndr-gl3",
        "openrndr-tessellation",
        "openrndr-svg",
        "openrndr-kartifex",
        "openrndr-ktessellation"
]

def doNotPublish = ["openrndr-demos"]

configure(allprojects.findAll { multiplatformModules.contains(it.name) && !doNotPublish.contains(it.name) }) {
    apply plugin: 'maven-publish'
    apply plugin: 'signing'

    def fjdj = tasks.create("fakeJavaDocJar", Jar) {
        archiveClassifier = "javadoc"
    }

    publishing {
        publications {
            matching { it.name == "jvm" }.all { p ->
                artifact(fjdj)
            }
        }

        repositories {
            maven {
                credentials {
                    username findProperty("ossrhUsername") ?: System.getenv("OSSRH_USERNAME")
                    password findProperty("ossrhPassword") ?: System.getenv("OSSRH_PASSWORD")
                }
                if (!isReleaseVersion) {
                    url "https://s01.oss.sonatype.org/content/repositories/snapshots"
                } else {
                    url "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2"
                }
            }
        }
    }

    signing {
        required { isReleaseVersion && gradle.taskGraph.hasTask("publish") }
        sign publishing.publications
    }
}

configure(allprojects.findAll { !doNotPublish.contains(it.name) && (multiplatformModules.contains(it.name)) }) {
    publishing {
        publications {
            all {
                pom {
                    name = "$project.name"
                    description = "$project.name"
                    url = 'https://openrndr.org'
                    developers {
                        developer {
                            id = 'edwinjakobs'
                            name = 'Edwin Jakobs'
                            email = 'edwin@openrndr.org'
                        }
                    }
                    license {
                        licenses {
                            license {
                                name = 'BSD-2-Clause'
                                url = 'https://github.com/openrndr/openrndr/blob/master/LICENSE'
                                distribution = 'repo'
                            }
                        }
                    }
                    scm {
                        connection = "scm:git:git@github.com:openrndr/openrndr.git"
                        developerConnection = "scm:git:ssh://github.com/openrndr/openrndr.git"
                        url = "https://github.com/openrndr/openrndr"
                    }
                }
            }
        }
    }
}

configure(allprojects.findAll { !doNotPublish.contains(it.name) && (!multiplatformModules.contains(it.name)) }) {
    apply plugin: 'nebula.release'
    apply plugin: 'maven-publish'
    apply plugin: 'java'
    apply plugin: 'signing'

    java {
        withJavadocJar()
        withSourcesJar()
    }
    publishing {
        publications {
            mavenJava(MavenPublication) {
                from components.java
                groupId = "org.openrndr"
                artifactId = "$project.name"
                description = "$project.name"
                pom {
                    name = "$project.name"
                    description = "$project.name"
                    url = 'https://openrndr.org'
                    developers {
                        developer {
                            id = 'edwinjakobs'
                            name = 'Edwin Jakobs'
                            email = 'edwin@openrndr.org'
                        }
                    }
                    license {
                        licenses {
                            license {
                                name = 'BSD-2-Clause'
                                url = 'https://github.com/openrndr/openrndr/blob/master/LICENSE'
                                distribution = 'repo'
                            }
                        }
                    }
                    scm {
                        connection = "scm:git:git@github.com:openrndr/openrndr.git"
                        developerConnection = "scm:git:ssh://github.com/openrndr/openrndr.git"
                        url = "https://github.com/openrndr/openrndr"
                    }
                }
            }
        }
        repositories {
            maven {
                credentials {
                    username findProperty("ossrhUsername") ?: System.getenv("OSSRH_USERNAME")
                    password findProperty("ossrhPassword") ?: System.getenv("OSSRH_PASSWORD")
                }
                if (!isReleaseVersion) {
                    url "https://s01.oss.sonatype.org/content/repositories/snapshots"
                } else {
                    url "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2"
                }
            }
        }
    }
    signing {
        required { isReleaseVersion && gradle.taskGraph.hasTask("publish") }
        sign publishing.publications.mavenJava
    }
}

subprojects {
    if (name != "openrndr-demos") {
        apply(plugin: "nebula.release")
    }
    // Equivalent Kotlin is: tasks.register<DependencyReportTask>("dependenciesAll") { ...
    tasks.register("dependenciesAll", DependencyReportTask) {
        group = HelpTasksPlugin.HELP_GROUP
        description = "Displays all dependencies, including subprojects."
    }
}