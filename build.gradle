import org.gradle.nativeplatform.platform.internal.DefaultNativePlatform

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "com.netflix.nebula:nebula-release-plugin:15.3.1"
    }
}

plugins {
    // remember to update all the versions here when upgrading kotlin version
    id 'org.jetbrains.kotlin.jvm' version '1.6.21' apply false
    id 'org.jetbrains.kotlin.multiplatform' version '1.6.21' apply false
    id 'org.jetbrains.kotlin.plugin.serialization' version '1.6.21' apply false
    id "org.jetbrains.dokka" version "1.5.30" apply false
}

/*
    Disable `dokkaHtmlMultiModule` task on Windows because of this error:
    No signature of method: org.jetbrains.dokka.gradle.GradleDokkaSourceSetBuilder.set() is applicable for argument types: (Boolean) values: [true]
			Possible solutions: use([Ljava.lang.Object;), wait(), any(), grep(), wait(long), use(java.util.List, groovy.lang.Closure) (11 s 190 ms)
 */
def dokkaEnabled = !DefaultNativePlatform.currentOperatingSystem.windows

if (dokkaEnabled) {
    apply plugin: 'org.jetbrains.dokka'
}

ext.isReleaseVersion = !version.endsWith("SNAPSHOT")

if (dokkaEnabled) {
    // See https://kotlin.github.io/dokka/1.5.30/user_guide/gradle/usage/
    tasks.named("dokkaHtml") {
        moduleName.set("openrndr")
        dokkaSourceSets {
            named("main") { /* configure main source set */
                perPackageOption {
                    matchingRegex.set(".*gl3.*")
                    suppress.set(true)
                }
                perPackageOption {
                    matchingRegex.set(".*internal*")
                    suppress.set(true)
                }
                perPackageOption {
                    matchingRegex.set(".*artifex*")
                    suppress.set(true)
                }
                perPackageOption {
                    matchingRegex.set("io\\.lacuna.*")
                    suppress.set(true)
                }

                // Includes and sourceLink not working. See:
                // https://github.com/Kotlin/dokka/issues/1838

                // This .kts demo uses both and works:
                // https://github.com/Kotlin/dokka/tree/master/examples/gradle/dokka-gradle-example

                // Try converting to .kts or wait for dokka >1.5.30

//                includes.from("Module.md")
//                def sourceSetName = name
//                println(sourceSetName)
//                sourceLink {
//                    localDirectory.set(file("$sourceSetName/src/commonMain/kotlin"))
//                    remoteUrl.set(uri("https://github.com/openrndr/openrndr/blob/master/src/main/kotlin").toURL())
//                    remoteLineSuffix.set("#L")
//                }
            }
            configureEach {
                skipDeprecated.set(true)
                skipEmptyPackages.set(true)

            }
        }
    }
}

["openrndr-animatable",
 "openrndr-draw",
 "openrndr-dds",
 "openrndr-filter",
 "openrndr-core",
 "openrndr-math",
 "openrndr-color",
 "openrndr-event",
 "openrndr-shape",
 "openrndr-utils",
].each {

    project(":$it") {
        apply plugin: 'org.jetbrains.dokka'
    }
}


allprojects {
    group 'org.openrndr'
    repositories {
        mavenCentral()
    }
}

def multiplatformModules = [
        "openrndr-application",
        "openrndr-filter",
        "openrndr-event",
        "openrndr-math",
        "openrndr-color",
        "openrndr-utils",
        "openrndr-shape",
        "openrndr-binpack",
        "openrndr-animatable",
        "openrndr-draw",
        "openrndr-webgl",
        "openrndr-extensions",
        "openrndr-dds",
        "openrndr-openal",
        "openrndr-gl3",
        "openrndr-tessellation",
        "openrndr-svg",
        "openrndr-kartifex",
        "openrndr-ktessellation"
]


configure(allprojects.findAll { !multiplatformModules.contains(it.name) }) {
    apply plugin: 'idea'
    apply plugin: 'java'
    apply plugin: 'kotlin'
    apply plugin: 'maven-publish'

    dependencies {
        implementation libs.kotlin.logging
        implementation libs.kotlin.coroutines
        implementation libs.kotlin.stdlib
        testImplementation libs.spek.dsl
        testImplementation libs.kluent
        testImplementation libs.kotlin.test
        testRuntimeOnly libs.spek.junit5
        testRuntimeOnly libs.kotlin.reflect
    }

    test {
        useJUnitPlatform {
            includeEngines 'spek2'
        }
    }

    java {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }

    javadoc {
        options.addBooleanOption 'Xdoclint:none', true
    }

    tasks.withType(org.jetbrains.kotlin.gradle.tasks.AbstractKotlinCompile).all {
        kotlinOptions.freeCompilerArgs += ["-Xuse-experimental=kotlinx.coroutines.InternalCoroutinesApi"]
    }
}

def doNotPublish = ["openrndr-demos"]

configure(allprojects.findAll { multiplatformModules.contains(it.name) && !doNotPublish.contains(it.name) }) {
    apply plugin: 'maven-publish'
    apply plugin: 'signing'

    def proj = it

    def publicationsFromMainHost = ["jvm", "js"] + "kotlinMultiplatform"

    def fjdj = tasks.create("fakeJavaDocJar", Jar) {
        archiveClassifier = "javadoc"
    }

    publishing {
        publications {
            matching { it.name == "jvm" }.all { p ->
                artifact(fjdj)
            }
        }

        repositories {
            maven {
                credentials {
                    username findProperty("ossrhUsername") ?: System.getenv("OSSRH_USERNAME")
                    password findProperty("ossrhPassword") ?: System.getenv("OSSRH_PASSWORD")
                }
                if (!isReleaseVersion) {
                    url "https://s01.oss.sonatype.org/content/repositories/snapshots"
                } else {
                    url "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2"
                }
            }
        }
    }

    signing {
        required { isReleaseVersion && gradle.taskGraph.hasTask("publish") }
        sign publishing.publications
    }
}

configure(allprojects.findAll { !doNotPublish.contains(it.name) && (multiplatformModules.contains(it.name)) }) {
    publishing {
        publications {
            all {
                pom {
                    name = "$project.name"
                    description = "$project.name"
                    url = 'https://openrndr.org'
                    developers {
                        developer {
                            id = 'edwinjakobs'
                            name = 'Edwin Jakobs'
                            email = 'edwin@openrndr.org'
                        }
                    }
                    license {
                        licenses {
                            license {
                                name = 'BSD-2-Clause'
                                url = 'https://github.com/openrndr/openrndr/blob/master/LICENSE'
                                distribution = 'repo'
                            }
                        }
                    }
                    scm {
                        connection = "scm:git:git@github.com:openrndr/openrndr.git"
                        developerConnection = "scm:git:ssh://github.com/openrndr/openrndr.git"
                        url = "https://github.com/openrndr/openrndr"
                    }
                }
            }
        }
    }
}

configure(allprojects.findAll { !doNotPublish.contains(it.name) && (!multiplatformModules.contains(it.name)) }) {
    apply plugin: 'nebula.release'
    apply plugin: 'maven-publish'
    apply plugin: 'signing'

    java {
        withJavadocJar()
        withSourcesJar()
    }
    publishing {
        publications {
            mavenJava(MavenPublication) {
                from components.java
                groupId = "org.openrndr"
                artifactId = "$project.name"
                description = "$project.name"
                pom {
                    name = "$project.name"
                    description = "$project.name"
                    url = 'https://openrndr.org'
                    developers {
                        developer {
                            id = 'edwinjakobs'
                            name = 'Edwin Jakobs'
                            email = 'edwin@openrndr.org'
                        }
                    }
                    license {
                        licenses {
                            license {
                                name = 'BSD-2-Clause'
                                url = 'https://github.com/openrndr/openrndr/blob/master/LICENSE'
                                distribution = 'repo'
                            }
                        }
                    }
                    scm {
                        connection = "scm:git:git@github.com:openrndr/openrndr.git"
                        developerConnection = "scm:git:ssh://github.com/openrndr/openrndr.git"
                        url = "https://github.com/openrndr/openrndr"
                    }
                }
            }
        }
        repositories {
            maven {
                credentials {
                    username findProperty("ossrhUsername") ?: System.getenv("OSSRH_USERNAME")
                    password findProperty("ossrhPassword") ?: System.getenv("OSSRH_PASSWORD")
                }
                if (!isReleaseVersion) {
                    url "https://s01.oss.sonatype.org/content/repositories/snapshots"
                } else {
                    url "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2"
                }
            }
        }
    }
    signing {
        required { isReleaseVersion && gradle.taskGraph.hasTask("publish") }
        sign publishing.publications.mavenJava
    }
}

configure(allprojects.findAll { it.name != "openrndr-demos" }) {
    //apply plugin: 'maven-publish'
    apply plugin: 'nebula.release'
}
